// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: note_images.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createImage = `-- name: CreateImage :one
INSERT INTO note_images(note_id,image_url,caption) VALUES($1,$2,$3) RETURNING id, note_id, image_url, caption, created_at
`

type CreateImageParams struct {
	NoteID   pgtype.Int4
	ImageUrl string
	Caption  pgtype.Text
}

func (q *Queries) CreateImage(ctx context.Context, arg CreateImageParams) (NoteImage, error) {
	row := q.db.QueryRow(ctx, createImage, arg.NoteID, arg.ImageUrl, arg.Caption)
	var i NoteImage
	err := row.Scan(
		&i.ID,
		&i.NoteID,
		&i.ImageUrl,
		&i.Caption,
		&i.CreatedAt,
	)
	return i, err
}

const getImagesByNoteID = `-- name: GetImagesByNoteID :many
SELECT id, note_id, image_url, caption, created_at FROM note_images where note_id=$1 ORDER BY created_at ASC
`

func (q *Queries) GetImagesByNoteID(ctx context.Context, noteID pgtype.Int4) ([]NoteImage, error) {
	rows, err := q.db.Query(ctx, getImagesByNoteID, noteID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NoteImage
	for rows.Next() {
		var i NoteImage
		if err := rows.Scan(
			&i.ID,
			&i.NoteID,
			&i.ImageUrl,
			&i.Caption,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
