// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: notes.sql

package repository

import (
	"context"
)

const createNote = `-- name: CreateNote :one
INSERT INTO notes (title,content) VALUES ($1,$2) RETURNING id, title, content, created_at
`

type CreateNoteParams struct {
	Title   string
	Content string
}

func (q *Queries) CreateNote(ctx context.Context, arg CreateNoteParams) (Note, error) {
	row := q.db.QueryRow(ctx, createNote, arg.Title, arg.Content)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const getNoteByID = `-- name: GetNoteByID :one
SELECT id, title, content, created_at FROM notes WHERE id=$1
`

func (q *Queries) GetNoteByID(ctx context.Context, id int32) (Note, error) {
	row := q.db.QueryRow(ctx, getNoteByID, id)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const listNotes = `-- name: ListNotes :many
SELECT id, title, content, created_at FROM notes ORDER BY created_at desc
`

func (q *Queries) ListNotes(ctx context.Context) ([]Note, error) {
	rows, err := q.db.Query(ctx, listNotes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Note
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
